name: Build and Test

on: [push]

env:
    # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
    BUILD_TYPE: Release
    JEMALLOC_PATH: /tmp/jemalloc
    CC: mpicc
    CXX: mpicxx

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install numactl
      run: sudo apt-get install libnuma-dev openmpi-bin libopenmpi-dev

    - name: Install jemalloc
      run: |
        git clone --depth 1 https://github.com/jemalloc/jemalloc.git
        cd jemalloc
        ./autogen.sh
        mkdir build
        cd build
        ../configure --prefix="${{env.JEMALLOC_PATH}}" --with-jemalloc-prefix=je_
        make -j
        make install

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        export PKG_CONFIG_PATH="${{env.JEMALLOC_PATH}}/lib/pkgconfig:${PKG_CONFIG_PATH}"
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DHUGE_ALLOC_TESTS=OFF

    - name: Build
      # Build your program with the given configuration
      run: cmake -DCMAKE_CXX_COMPILER=${{env.CXX}} -DCMAKE_C_COMPILER=${{env.CC}} -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} 

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        export LD_LIBRARY_PATH="${{env.JEMALLOC_PATH}}/lib:${LD_LIBRARY_PATH}"
        ctest -C ${{env.BUILD_TYPE}}
